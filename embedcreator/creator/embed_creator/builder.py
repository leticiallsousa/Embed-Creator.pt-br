from __future__ import annotations
from typing import Optional, Any
from discord import ButtonStyle, CategoryChannel, Embed, ForumChannel, HTTPException, Interaction, StageChannel, Colour, SelectOption
from discord.ext.commands import Bot
from discord.ui import Item, Select, select, Button, button, View
from creator.embed_creator.methods import CreatorMethods
from creator.input import ChannelSelectPrompt

__all__ = ("EmbedCreator")

class EmbedCreator(View):
    """
    Essa classe √© uma subclasse de `discord.ui.View`.
    Destina-se a ser usada como uma classe base para criar um painel que permite os usu√°rios criarem embeds em um canal Discord TextChannel especificado. 

    Par√¢metros:
        bot (discord.Client ou discord.ext.commands.Bot): Uma inst√¢ncia do bot do Discord que vai ser usada para acessar informa√ß√µes do cliente como avatar, nome e ID. 
        embed (discord.Embed): Uma inst√¢ncia do discord.Embed que vai ser usada como embed principal.
        timeout (float, optional): Um argumento opcional que √© passado para a classe m√£e View. √â usado para especificar um timeout para a view, em segundos.
    """

    def __init__(
        self,
        *,
        bot: Bot,
        embed: Optional[Embed] = None,
        timeout: Optional[float] = None,
        **kwargs: Any,
    ) -> None:
        super().__init__(timeout=timeout)
        if not embed:
            embed = self.get_default_embed
        self.bot, self.embed, self.timeout, self._creator_methods = (
            bot,
            embed,
            timeout,
            CreatorMethods(embed),
        )
        self.options_data = [
            {
                "label": kwargs.get("author_label", "Edite o Autor"),
                "description": kwargs.get(
                    "author_description", "Edita o nome e √≠cone do autor."
                ),
                "emoji": kwargs.get("author_emoji", "üîπ"),
                "value": "author",
            },
            {
                "label": kwargs.get(
                    "message_label", "Edite a Mensagem (t√≠tulo e descri√ß√£o)"
                ),
                "description": kwargs.get(
                    "message_description", "Edita o t√≠tulo e descri√ß√£o da embed."
                ),
                "emoji": kwargs.get("message_emoji", "üîπ"),
                "value": "message",
            },
            {
                "label": kwargs.get("thumbnail_label", "Edite a Thumbnail"),
                "description": kwargs.get(
                    "thumbnail_description", "Edita a thumbnail da embed."
                ),
                "emoji": kwargs.get("thumbnail_emoji", "üîπ"),
                "value": "thumbnail",
            },
            {
                "label": kwargs.get("image_label", "Edite a Imagem"),
                "description": kwargs.get(
                    "image_description", "Edita a imagem da embed."
                ),
                "emoji": kwargs.get("image_emoji", "üîπ"),
                "value": "image",
            },
            {
                "label": kwargs.get("footer_label", "Edite o Rodap√©"),
                "description": kwargs.get(
                    "footer_description", "Edita o texto e o √≠cone do rodap√© da embed."
                ),
                "emoji": kwargs.get("footer_emoji", "üîπ"),
                "value": "footer",
            },
            {
                "label": kwargs.get("color_label", "Edite a Cor"),
                "description": kwargs.get(
                    "color_description", "Edita a cor da embed."
                ),
                "emoji": kwargs.get("color_emoji", "üîπ"),
                "value": "color",
            },
            {
                "label": kwargs.get("addfield_label", "Adicione um campo"),
                "description": kwargs.get(
                    "addfield_description", "Adiciona um campo √† embed."
                ),
                "emoji": kwargs.get("addfield_emoji", "üîπ"),
                "value": "addfield",
            },
            {
                "label": kwargs.get("removefield_label", "Remova um campo"),
                "description": kwargs.get(
                    "removefield_description", "Remove um campo da embed."
                ),
                "emoji": kwargs.get("removefield_emoji", "üîπ"),
                "value": "removefield",
            },
        ]

        self.children[0].options = [SelectOption(  # type: ignore
            **option) for option in self.options_data
        ]
        self.children[1].label, self.children[1].emoji, self.children[1].style = kwargs.get(  # type: ignore
            "send_label", 'Enviar'), kwargs.get("send_emoji", None), kwargs.get("send_style", ButtonStyle.blurple)
        self.children[2].label, self.children[2].emoji, self.children[2].style = kwargs.get(  # type: ignore
            "cancel_label", 'Cancelar'), kwargs.get("cancel_emoji", None), kwargs.get("cancel_style", ButtonStyle.red)  # type: ignore

    async def on_error(self, interaction: Interaction, error: Exception, item: Item[Any]) -> None:
        if isinstance(error, HTTPException) and error.code == 50035: # erro de url
            await interaction.followup.send('Por favor, insira um URL v√°lido', ephemeral=True)

    async def update_embed(self, interaction: Interaction):
        """Essa fun√ß√£o vai atualizar a embed inteira e editar a mensagem e view."""
        return await interaction.message.edit(embed=self.embed, view=self)  # type: ignore

    @property
    def get_default_embed(self) -> Embed:
        """
        Esse m√©todo de classe `get_default_embed` returna um objeto `discord.Embed` pr√©-configurado com t√≠tulo, descri√ß√£o, cor, autor, thumbnail, imagem e rodap√© j√° definidos com valores espec√≠ficos.
        Ele pode ser usado como um modelo padr√£o para criar o Embed Builder.

        Retorna:
            embed (discord.Embed)
        """
        embed = Embed(title='Isso √© um t√≠tulo',
                      description="Use o menu de sele√ß√£o para editar minhas se√ß√µes", colour=Colour.from_str('#070d2d'))
        embed.set_author(name='Bem-vindo ao Embed Builder.',
                         icon_url="https://i.imgur.com/8Zx1lLv.gif")
        embed.set_thumbnail(
            url="https://i.imgur.com/hARDXOC.png")
        embed.set_image(
            url="https://i.imgur.com/g1eBpIP.png")
        embed.set_footer(
            text='Isso √© um rodap√©', icon_url="https://i.imgur.com/8Zx1lLv.gif")
        return embed

    @select(placeholder="Edite uma se√ß√£o")
    async def edit_select_callback(
        self, interaction: Interaction, select: Select
    ) -> None:
        """
        Esse m√©todo √© uma fun√ß√£o callback da intera√ß√£o `select`.
        Ele √© invocado quando um usu√°rio seleciona uma op√ß√£o do menu de sele√ß√£o. 
        O m√©todo usa o atributo `callbacks` da classe `CreatorMethods` para chamar a fun√ß√£o callback apropriada baseada na sele√ß√£o do usu√°rio.

        Par√¢metros:
            interaction (discord.Interaction): O objeto "interaction" representando a intera√ß√£o atual.
            select (discord.Select): O objeto "select" representando o menu de sele√ß√£o.
        """
        await self._creator_methods.callbacks[select.values[0]](interaction)
        await self.update_embed(interaction)

    @button()
    async def send_callback(self, interaction: Interaction, button: Button) -> None:
        """
        Esse m√©todo √© uma fun√ß√£o callback para a interera√ß√£o `button`. Ele √© invocado quando o usu√°rio clica no bot√£o "Enviar".
        O m√©todo cria um objeto `ChannelSelectPrompt` e envia ele como uma mensagem ephemeral para o usu√°rio. E ent√£o ele espera o usu√°rio selecionar um chat.
        Se um chat √© selecionado, o m√©todo envia a embed para o chat selecionado e ent√£o deleta a mensagem de intera√ß√£o original.

        Par√¢metros:
            interaction (discord.Interaction): O objeto "interaction" representando a intera√ß√£o atual.
            button (discord.Button): O objeto "button" representando o bot√£o "Enviar".
        """
        prompt = ChannelSelectPrompt(
            "Selecione um chat para enviar essa embed...", True, 1)
        await interaction.response.send_message(view=prompt, ephemeral=True)
        await prompt.wait()
        if prompt.values:
            if not isinstance(prompt.values[0], (StageChannel, ForumChannel, CategoryChannel)):
                await prompt.values[0].send(embed=self.embed)  # type: ignore
                await interaction.message.delete()  # type: ignore

    @button()
    async def cancel_callback(self, interaction: Interaction, button: Button) -> None:
        """
        Esse m√©todo √© uma fun√ß√£o callback para a intera√ß√£o `button`. Ele √© invocado quando um usu√°rio clica no bot√£o "Cancelar".
        O m√©todo deleta a mensagem de intera√ß√£o original e finaliza a intera√ß√£o atual.

        Par√¢metros:
            interaction (Interaction): O objeto "interaction" representando a intera√ß√£o atual.
            button (Button): O objeto "button" representando o bot√£o "Cancelar".
        """
        await interaction.message.delete()  # type: ignore
        self.stop()
